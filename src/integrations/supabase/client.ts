
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pkxzblfqcsebqgvuhizh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBreHpibGZxY3NlYnFndnVoaXpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3NjUwNTYsImV4cCI6MjA2MTM0MTA1Nn0.Ia9SprOFy2B7EmVHJrnwTkvaiGAovAdZu9kXr6WDUbU";
// Use a default value for SERVICE_ROLE_KEY since process.env isn't available in browser
const SERVICE_ROLE_KEY = SUPABASE_PUBLISHABLE_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// For admin operations we use a separate client with service role permissions
// This should only be used in protected contexts like admin functions
export const supabaseAdmin = createClient<Database>(SUPABASE_URL, SERVICE_ROLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Define storage bucket name as a constant for consistency
export const RESUME_BUCKET = 'resumes';

// Helper function to clean up auth state - useful for preventing authentication issues
export const cleanupAuthState = () => {
  // Remove standard auth tokens
  localStorage.removeItem('supabase.auth.token');
  
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  // Remove from sessionStorage if in use
  Object.keys(sessionStorage || {}).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      sessionStorage.removeItem(key);
    }
  });
};
